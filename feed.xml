<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://grohong.github.io/</id><title>grohong</title><subtitle></subtitle> <updated>2021-01-24T22:37:02+09:00</updated> <author> <name>grohong</name> <uri>https://grohong.github.io/</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://grohong.github.io/" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 grohong </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>What's new in RxSwift6(2)</title><link href="https://grohong.github.io//posts/RxSwift6(2)/" rel="alternate" type="text/html" title="What's new in RxSwift6(2)" /><published>2021-01-10T11:43:59+09:00</published> <updated>2021-01-10T11:43:59+09:00</updated> <id>https://grohong.github.io//posts/RxSwift6(2)/</id> <content src="https://grohong.github.io//posts/RxSwift6(2)/" /> <author> <name>grohong</name> </author> <category term="RxSwift" /> <summary> 앞 포스팅에서는 Swift5가 RxSwift6에 어떻게 적용되었는지 살펴보았습니다. 이번 포스팅에서는 RxSwift6에 새롭게 추가된 Observable type 과 Operation을 알아보고, 사용성을 어떻게 개션 되었는지 살펴 보도록 하겠습니다! 👀 Infallible Infallible은 RxSwift6에서 새롭게 추가된 Observable type입니다. Observable과 다르게 .error를 방출(emit)하지 않습니다. 이는 RxCocoa의 Relay와 비슷한 개념(relay에서는 .completed 와 .error를 방출 하지 않습니다.)으로 .error로 인해 subscribe가 종료되는 것을 방지할때 유용하게 쓰일거 같습니다. Infallible&amp;lt;String&amp;gt;.cr... </summary> </entry> <entry><title>What's new in RxSwift6(1)</title><link href="https://grohong.github.io//posts/RxSwift6(1)/" rel="alternate" type="text/html" title="What's new in RxSwift6(1)" /><published>2021-01-09T11:43:59+09:00</published> <updated>2021-01-24T22:32:56+09:00</updated> <id>https://grohong.github.io//posts/RxSwift6(1)/</id> <content src="https://grohong.github.io//posts/RxSwift6(1)/" /> <author> <name>grohong</name> </author> <category term="RxSwift" /> <summary> 2021년 RxSwift6가 새로운 로고와 함께 릴리즈 됐습니다. 🚀🚀 변경사항에 대해서는 해당 포스팅에서 살펴 볼 수 있습니다. 이번 포스팅에서는 각각의 변경사항이 어떻게 구현됐는지 알아보고, 어떻게 쓰일지 정리해 보도록 하겠습니다! Swift5 RxSwift6에서는 Swift5에서 새롭게 업데이트 된 내용이 반영되었습니다. 대표적으로 KeyPayh와 @dynamicMemberLookup를 이용한 property 접근으로 방식과 @functionBuilder가 도입되었고, Result type이 추가 되었습니다. 이번 장에서는 RxSwift6에 어떻게 Swift5를 사용하고 있는지 봐보도록 하겠습니다. dynamicMemberLookup을 사용한 Binder의 자동 합성 🌟 이번 RxSwi... </summary> </entry> <entry><title>Grand Central Dispatch(GCD)</title><link href="https://grohong.github.io//posts/Concurrency-CGD/" rel="alternate" type="text/html" title="Grand Central Dispatch(GCD)" /><published>2021-01-04T11:43:59+09:00</published> <updated>2021-01-04T11:43:59+09:00</updated> <id>https://grohong.github.io//posts/Concurrency-CGD/</id> <content src="https://grohong.github.io//posts/Concurrency-CGD/" /> <author> <name>grohong</name> </author> <category term="Concurrency" /> <summary> Threads Thread는 정확히는 thread of execution은 줄임말 입니다. 한 task(작업)의 자원을 시스템에서 어떻게 실행시키는지를 뜻하고 있죠. 실제로 우리가 사용하는 app에선 여러 작업(multiple tasks) 이 multiple thread로 동작합니다. 이런 multithreading로 작업했을 경우 많은 장점이 있습니다. Faster execution: concurrently하게 작업되기 때문에 빠르게 작업이 가능 Responsiveness: UI는 main thread에서만 작업 되기 때문에, 여러 작업을 핟더라도 app 반응에 영향이 없다. Optimized resource consumption: OS에 최적화 되어 있다. 하지만, 아래와 같은 ... </summary> </entry> <entry><title>읽기 좋은 코드가 좋은 코드다(3)</title><link href="https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(3)/" rel="alternate" type="text/html" title="읽기 좋은 코드가 좋은 코드다(3)" /><published>2020-12-24T00:15:00+09:00</published> <updated>2021-01-04T16:47:28+09:00</updated> <id>https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(3)/</id> <content src="https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(3)/" /> <author> <name>grohong</name> </author> <category term="books" /> <summary> Part 3, 루프와 논리를 단순화 하기 가독성을 높일 수 있는 최상의 방법은 읽어야 할 코드의 양을 줄이는 것입니다.(No Code, No Problem) 이를 위해 최대한 중복 코드를 줄이고, 가독성이 좋은 코드를 작성 하는 방법을 알아보겠습니다! 상관없는 하위문제 추출하기 📤 일반적인 목적의 코드를 프로젝트의 특정 코드에서 분리해야 합니다. 여거서 프로젝트의 특정 코드는 프로젝트라는 목적을 달성하기 위한 코드이고, 목적의 코드는 프로젝트와는 직접적인 상관은 없지만 목적을 달성하기 위한 코드입니다. 프로젝트의 코드의 가독성을 높이기 위해서는 이러한 목적의 코드를 분리하여, 프로젝트의 목적을 달성하기 위한 코드에 집중할 수 있도록 해야 합니다. 순수한 유틸리티 코드 유틸리티 코드는 ... </summary> </entry> <entry><title>읽기 좋은 코드가 좋은 코드다(2)</title><link href="https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(2)/" rel="alternate" type="text/html" title="읽기 좋은 코드가 좋은 코드다(2)" /><published>2020-12-12T00:15:00+09:00</published> <updated>2021-01-04T16:42:50+09:00</updated> <id>https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(2)/</id> <content src="https://grohong.github.io//posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(2)/" /> <author> <name>grohong</name> </author> <category term="books" /> <summary> Part 2, 루프와 논리를 단순화 하기 Part 1, 표면적 수준에서의 개선 에서는 코드의 가독성을 좋게하기 위한 방법을 살펴 보았습니다. 이번 장에서는 코드의 복잡한 루프, 거대한 표현, 많은 변수로 이해하기 어려운 코드를 흐름제어(controll flow), 논리식(logical expression), 변수를 단순화 시켜 코드를 이해하기 쉽도록 해보겠습니다. 읽기 쉽도록 흐름제어 만들기 👀 흐름을 제어하는 조건과 루프는 한번에 읽을 수 있도록 노력해야합니다. 해당 흐름을 이해하기 위해 다시 되돌아 가지 않도록 만들어야 합니다. 조건문에서 인수의 순서 조건문에서 변화하는 값을 왼쪽, 안정적인 값을 오른쪽에 놓자! if length &amp;gt;= 10 { } // not // if ... </summary> </entry> </feed>
