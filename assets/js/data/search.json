[ { "title": "What&#39;s new in RxSwift6(2)", "url": "/posts/RxSwift6(2)/", "categories": "RxSwift", "tags": "RxSwift6", "date": "2021-01-10 11:43:59 +0900", "snippet": "앞 포스팅에서는 Swift5가 RxSwift6에 어떻게 적용되었는지 살펴보았습니다. 이번 포스팅에서는 RxSwift6에 새롭게 추가된 Observable type 과 Operation을 알아보고, 사용성을 어떻게 개션 되었는지 살펴 보도록 하겠습니다! 👀InfallibleInfallible은 RxSwift6에서 새롭게 추가된 Observable type입니다. Observable과 다르게 .error를 방출(emit)하지 않습니다. 이는 RxCocoa의 Relay와 비슷한 개념(relay에서는 .completed 와 .erro..." }, { "title": "What&#39;s new in RxSwift6(1)", "url": "/posts/RxSwift6(1)/", "categories": "RxSwift", "tags": "RxSwift6, Swift5", "date": "2021-01-09 11:43:59 +0900", "snippet": "2021년 RxSwift6가 새로운 로고와 함께 릴리즈 됐습니다. 🚀🚀변경사항에 대해서는 해당 포스팅에서 살펴 볼 수 있습니다. 이번 포스팅에서는 각각의 변경사항이 어떻게 구현됐는지 알아보고, 어떻게 쓰일지 정리해 보도록 하겠습니다!Swift5RxSwift6에서는 Swift5에서 새롭게 업데이트 된 내용이 반영되었습니다. 대표적으로 KeyPayh와 @dynamicMemberLookup를 이용한 property 접근으로 방식과 @functionBuilder가 도입되었고, Result type이 추가 되었습니다. 이번 장에서는 R..." }, { "title": "Grand Central Dispatch(GCD)", "url": "/posts/Concurrency-CGD/", "categories": "Concurrency", "tags": "iOS, GCD, Concurrency", "date": "2021-01-04 11:43:59 +0900", "snippet": "ThreadsThread는 정확히는 thread of execution은 줄임말 입니다. 한 task(작업)의 자원을 시스템에서 어떻게 실행시키는지를 뜻하고 있죠. 실제로 우리가 사용하는 app에선 여러 작업(multiple tasks) 이 multiple thread로 동작합니다.이런 multithreading로 작업했을 경우 많은 장점이 있습니다. Faster execution: concurrently하게 작업되기 때문에 빠르게 작업이 가능 Responsiveness: UI는 main thread에서만 작업 되기 때문에..." }, { "title": "읽기 좋은 코드가 좋은 코드다(3)", "url": "/posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(3)/", "categories": "books", "tags": "book", "date": "2020-12-24 00:15:00 +0900", "snippet": "Part 3, 루프와 논리를 단순화 하기가독성을 높일 수 있는 최상의 방법은 읽어야 할 코드의 양을 줄이는 것입니다.(No Code, No Problem)이를 위해 최대한 중복 코드를 줄이고, 가독성이 좋은 코드를 작성 하는 방법을 알아보겠습니다!상관없는 하위문제 추출하기 📤일반적인 목적의 코드를 프로젝트의 특정 코드에서 분리해야 합니다.여거서 프로젝트의 특정 코드는 프로젝트라는 목적을 달성하기 위한 코드이고, 목적의 코드는 프로젝트와는 직접적인 상관은 없지만 목적을 달성하기 위한 코드입니다.프로젝트의 코드의 가독성을 높이기 ..." }, { "title": "읽기 좋은 코드가 좋은 코드다(2)", "url": "/posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(2)/", "categories": "books", "tags": "book", "date": "2020-12-12 00:15:00 +0900", "snippet": "Part 2, 루프와 논리를 단순화 하기Part 1, 표면적 수준에서의 개선 에서는 코드의 가독성을 좋게하기 위한 방법을 살펴 보았습니다.이번 장에서는 코드의 복잡한 루프, 거대한 표현, 많은 변수로 이해하기 어려운 코드를 흐름제어(controll flow), 논리식(logical expression), 변수를 단순화 시켜 코드를 이해하기 쉽도록 해보겠습니다.읽기 쉽도록 흐름제어 만들기 👀흐름을 제어하는 조건과 루프는 한번에 읽을 수 있도록 노력해야합니다. 해당 흐름을 이해하기 위해 다시 되돌아 가지 않도록 만들어야 합니다.조..." }, { "title": "읽기 좋은 코드가 좋은 코드다(1)", "url": "/posts/Books-%EC%9D%BD%EA%B8%B0-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EA%B0%80-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C%EB%8B%A4(1)/", "categories": "books", "tags": "book", "date": "2020-12-07 00:15:00 +0900", "snippet": "Part 1, 표면적 수준에서의 개선어떤 책이든 처음 봤을 때 보기 좋을 때가 쉽게 읽고, 이해할 수 있을 것입니다. 이처럼 처음 “표면적 수준”에서의 개선이란 처음 코드를 보았을 때 “보기 좋게” 또는 “쉽게 이해하게”할 수 있도록 이름을 짓고, 좋은 설명을 달고, 보기 좋게 정렬 하는 것을 뜻합니다.이름에 정보 담기 🔖변수, 함수 혹은 클래스 명을 정할 때 “좋은 이름”을 정했을 때는 생각보다 많은 정보를 담을 수 있습니다.특정한 단어를 사용하라Get 같은 보편적인 단어보다는 fetch, download 같은 구체적인 단어..." } ]
